
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { Phone, Mail, MessageCircle } from "lucide-react";

const LeadForm = () => {
  const [formData, setFormData] = useState({
    name: "",
    phone: ""
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();

  const sendToTelegram = async (name: string, phone: string) => {
    const BOT_TOKEN = "YOUR_BOT_TOKEN"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    const CHAT_ID = "YOUR_CHAT_ID"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
    
    const message = `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n\nüë§ –ò–º—è: ${name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n\n‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;
    
    try {
      const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: CHAT_ID,
          text: message,
          parse_mode: 'HTML'
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to send to Telegram');
      }

      return true;
    } catch (error) {
      console.error('Error sending to Telegram:', error);
      return false;
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
      const telegramSent = await sendToTelegram(formData.name, formData.phone);
      
      if (telegramSent) {
        toast({
          title: "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
          description: "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.",
        });
        setFormData({
          name: "",
          phone: ""
        });
      } else {
        toast({
          title: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
          description: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error('Error submitting form:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
        description: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  return (
    <section id="lead-form" className="py-20 px-4 bg-primary/5">
      <div className="container mx-auto max-w-4xl">
        <div className="text-center mb-12">
          <h2 className="text-3xl md:text-4xl font-bold text-foreground mb-6">
            –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
          </h2>
          <p className="text-lg text-muted-foreground">
            –û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É, –∏ –Ω–∞—à —ç–∫—Å–ø–µ—Ä—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
          {/* –§–æ—Ä–º–∞ */}
          <Card className="border-border">
            <CardHeader>
              <CardTitle className="text-foreground">–ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</CardTitle>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleSubmit} className="space-y-6">
                <div>
                  <Label htmlFor="name" className="text-foreground">–ò–º—è *</Label>
                  <Input
                    id="name"
                    name="name"
                    type="text"
                    value={formData.name}
                    onChange={handleChange}
                    className="mt-1"
                    required
                    placeholder="–í–∞—à–µ –∏–º—è"
                  />
                </div>

                <div>
                  <Label htmlFor="phone" className="text-foreground">–¢–µ–ª–µ—Ñ–æ–Ω *</Label>
                  <Input
                    id="phone"
                    name="phone"
                    type="tel"
                    value={formData.phone}
                    onChange={handleChange}
                    className="mt-1"
                    required
                    placeholder="+7 (999) 999-99-99"
                  />
                </div>

                <Button
                  type="submit"
                  disabled={isSubmitting}
                  className="w-full bg-primary hover:bg-warm-brown text-primary-foreground"
                >
                  {isSubmitting ? "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"}
                </Button>

                <p className="text-xs text-muted-foreground text-center">
                  –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                </p>
              </form>
            </CardContent>
          </Card>

          {/* –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="space-y-8">
            <Card className="border-border">
              <CardContent className="p-6">
                <div className="flex items-center space-x-4 mb-4">
                  <Phone className="w-6 h-6 text-accent" />
                  <div>
                    <h3 className="font-semibold text-foreground">–¢–µ–ª–µ—Ñ–æ–Ω</h3>
                    <p className="text-muted-foreground">+7 (978) 553-30-97</p>
                  </div>
                </div>
                <p className="text-sm text-muted-foreground">
                  –ó–≤–æ–Ω–∏—Ç–µ —Å 8:00 –¥–æ 20:00, –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö
                </p>
              </CardContent>
            </Card>

            <Card className="border-border">
              <CardContent className="p-6">
                <div className="flex items-center space-x-4 mb-4">
                  <Mail className="w-6 h-6 text-accent" />
                  <div>
                    <h3 className="font-semibold text-foreground">Email</h3>
                    <p className="text-muted-foreground">info@drevko-crimea.ru</p>
                  </div>
                </div>
                <p className="text-sm text-muted-foreground">
                  –û—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
                </p>
              </CardContent>
            </Card>

            <Card className="border-border">
              <CardContent className="p-6">
                <div className="flex items-center space-x-4 mb-4">
                  <MessageCircle className="w-6 h-6 text-accent" />
                  <div>
                    <h3 className="font-semibold text-foreground">–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã</h3>
                    <p className="text-muted-foreground">WhatsApp, Telegram</p>
                  </div>
                </div>
                <p className="text-sm text-muted-foreground">
                  –ë—ã—Å—Ç—Ä–∞—è —Å–≤—è–∑—å –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
                </p>
              </CardContent>
            </Card>

            <div className="bg-accent/10 rounded-lg p-6">
              <h3 className="font-semibold text-foreground mb-3">
                –ì–∞—Ä–∞–Ω—Ç–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞
              </h3>
              <ul className="space-y-2 text-sm text-muted-foreground">
                <li>‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ –≤—ã–µ–∑–¥ –Ω–∞ —É—á–∞—Å—Ç–æ–∫</li>
                <li>‚Ä¢ –î–æ–≥–æ–≤–æ—Ä —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é</li>
                <li>‚Ä¢ –ü–æ—ç—Ç–∞–ø–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –ø–æ —Ñ–∞–∫—Ç—É —Ä–∞–±–æ—Ç</li>
                <li>‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è 1 –≥–æ–¥</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default LeadForm;
